const Playlist = require("../models/Playlist");
const spotifyApi = require("../config/spotifyConfig");

exports.createPlaylist = async (req, res) => {
  try {
    const { name, description, mood, activity, genres, tracks, isPublic } =
      req.body;

    // Create in our DB
    const playlist = new Playlist({
      name,
      description,
      owner: req.user._id,
      tracks,
      mood,
      activity,
      genres,
      isPublic,
    });

    await playlist.save();

    // Create on Spotify if user wants
    if (isPublic) {
      spotifyApi.setAccessToken(req.user.accessToken);
      const spotifyPlaylist = await spotifyApi.createPlaylist(
        req.user.spotifyId,
        {
          name: `${name} (MeloGen)`,
          description: `Generated by MeloGen based on ${mood} mood and ${activity} activity`,
          public: true,
        }
      );

      const trackUris = tracks.map(
        (track) => `spotify:track:${track.spotifyId}`
      );
      await spotifyApi.addTracksToPlaylist(spotifyPlaylist.body.id, trackUris);

      playlist.spotifyPlaylistId = spotifyPlaylist.body.id;
      await playlist.save();
    }

    res.status(201).json(playlist);
  } catch (err) {
    console.error("Playlist creation error:", err);
    res.status(500).json({ error: "Playlist creation failed" });
  }
};

exports.getUserPlaylists = async (req, res) => {
  try {
    const playlists = await Playlist.find({ owner: req.user._id }).sort({
      createdAt: -1,
    });
    res.json(playlists);
  } catch (err) {
    console.error("Get playlists error:", err);
    res.status(500).json({ error: "Failed to get playlists" });
  }
};

exports.generateRecommendations = async (req, res) => {
  try {
    const { mood, activity, genres, limit = 20 } = req.body;

    // Mood to Spotify acoustic attributes mapping
    const moodSettings = {
      happy: { target_valence: 0.8, min_energy: 0.6 },
      sad: { target_valence: 0.3, max_energy: 0.5 },
      energetic: { min_energy: 0.7, target_danceability: 0.8 },
      calm: { max_energy: 0.4, target_acousticness: 0.8 },
      focused: { min_instrumentalness: 0.7, target_tempo: 100 },
    };

    spotifyApi.setAccessToken(req.user.accessToken);

    const recommendations = await spotifyApi.getRecommendations({
      seed_genres: genres.join(","),
      limit,
      ...moodSettings[mood],
    });

    const tracks = recommendations.body.tracks.map((track) => ({
      spotifyId: track.id,
      name: track.name,
      artist: track.artists.map((a) => a.name).join(", "),
      album: track.album.name,
      duration: track.duration_ms,
      previewUrl: track.preview_url,
    }));

    res.json(tracks);
  } catch (err) {
    console.error("Recommendations error:", err);
    res.status(500).json({ error: "Failed to generate recommendations" });
  }
};
